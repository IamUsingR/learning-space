export PATH=$PATH:/Users/flavio.clesio/spark-2.0.2-bin-hadoop2.7/bin

Flavios-MacBook-Pro:strata-2016-singapore flavio.clesio$ /Users/flavio.clesio/Downloads/spark-2.0.2-bin-hadoop2.7/bin/./spark-shell --driver-memory 2G --executor-memory 2G --executor-cores 2

#Paste Mode
:pa

scala> 


ds.count()




import org.apache.spark.ml.feature.{HashingTF, IDF, Tokenizer}

val sentenceData = spark.createDataFrame(Seq(
  (0, "Hi I heard about Spark"),
  (0, "I wish Java could use case classes"),
  (1, "Logistic regression models are neat")
)).toDF("label", "sentence")

val tokenizer = new Tokenizer().setInputCol("sentence").setOutputCol("words")
val wordsData = tokenizer.transform(sentenceData)
val hashingTF = new HashingTF()
  .setInputCol("words").setOutputCol("rawFeatures").setNumFeatures(20)
val featurizedData = hashingTF.transform(wordsData)
// alternatively, CountVectorizer can also be used to get term frequency vectors

val idf = new IDF().setInputCol("rawFeatures").setOutputCol("features")
val idfModel = idf.fit(featurizedData)
val rescaledData = idfModel.transform(featurizedData)
rescaledData.select("features", "label").take(3).foreach(println)



featurizedData.show(false)



# Some example with Stop Words
# Can we registry some stop words into the list (Legal texts)?




import org.apache.spark.ml.feature.Word2Vec

// Input data: Each row is a bag of words from a sentence or document.
val documentDF = spark.createDataFrame(Seq(
  "Hi I heard about Spark".split(" "),
  "I wish Java could use case classes".split(" "),
  "Logistic regression models are neat".split(" ")
).map(Tuple1.apply)).toDF("text")

// Learn a mapping from words to Vectors.
val word2Vec = new Word2Vec()
  .setInputCol("text")
  .setOutputCol("result")
  .setVectorSize(3)
  .setMinCount(0)
val model = word2Vec.fit(documentDF)
val result = model.transform(documentDF)
result.select("result").take(3).foreach(println)



Word to doc
# Tranning the word (Put the position inside some similarity with the position)



setHandleInvalid("skip")



OneHotEncoder


Small note: using setHandleInvalid("skip") in the case that will have some missing data or unseen data, you can made some penalty into the label to remove any kind of bias



Hyperparameter




http://10.191.24.87:4044




/Users/flavio.clesio/Downloads/spark-2.0.2-bin-hadoop2.7/bin/./spark-shell --driver-memory 2G --executor-memory 2G --executor-cores 2




Correct: Users/flavio.clesio/Downloads/spark-2.0.2-bin-hadoop2.7/bin/./spark-shell --driver-memory 2G --executor-memory 2G --executor-cores 2



import org.apache.log4j.{Level, Logger}
import org.apache.spark.ml.feature.{CountVectorizer, NGram, RegexTokenizer, StopWordsRemover}
import org.apache.spark.ml.clustering._
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql._


    var inputDir = "data/topicmodeling/newsgroup_20/"
    var stopWordFile = "data/topicmodeling/stopwords.txt"

    
    val spark = SparkSession
      .builder
      .appName("TopicModelingExample")
      .master("local")
      .getOrCreate()
      
    import spark.implicits._

    val numTopics: Int = 10
    val maxIterations: Int = 100
    val vocabSize: Int = 10000

    val rawTextRDD = spark.sparkContext.wholeTextFiles(inputDir).map(_._2)
    val docDF = rawTextRDD
                  .zipWithIndex.toDF("text", "docId")
    val tokens = new RegexTokenizer()
                  .setGaps(false)
                  .setPattern("\\w+")
                  .setMinTokenLength(4)
                  .setInputCol("text")
                  .setOutputCol("words")
                  .transform(docDF)

    val stopwords = spark.sparkContext.textFile(stopWordFile).collect
    val filteredTokens = new StopWordsRemover()
                          .setStopWords(stopwords)
                          .setCaseSensitive(false)
                          .setInputCol("words")
                          .setOutputCol("filtered")
                          .transform(tokens)
    
   val ngram = new NGram()
                  .setInputCol("filtered")
                  .setOutputCol("ngrams")
                  .transform(filteredTokens)


    val cvModel = new CountVectorizer()
                    .setInputCol("ngrams")
                    .setOutputCol("features")
                    .setVocabSize(vocabSize)
                    .fit(ngram)

    val countVectors = cvModel
                        .transform(ngram)
                        .select("docId", "features")

    val lda = new LDA()
                  .setOptimizer("online")
                  .setK(numTopics)
                  .setMaxIter(maxIterations)

    val startTime = System.nanoTime()
    val ldaModel = lda.fit(countVectors.repartition(20))
    val elapsed = (System.nanoTime() - startTime) / 1e9

    println(s"Finished training LDA model.  Summary:")
    println(s"Training time (sec)\t$elapsed")
    println(s"==========")

    val topicIndices = ldaModel.describeTopics(maxTermsPerTopic = 10).coalesce(1)
    val vocabArray = cvModel.vocabulary
    
    for(i <- topicIndices) { println(s"Topic ${i(0)}")
     val a: Array[Int] = i(1).asInstanceOf[scala.collection.mutable.WrappedArray[Int]].toSeq.toArray
     val b: Array[Double] = i(2).asInstanceOf[scala.collection.mutable.WrappedArray[Double]].toSeq.toArray
     a.map(vocabArray(_)).zip(b).foreach { case (term, weight) => println(s"$term\t$weight") }
     println(s"==================")
    }





 

import org.apache.log4j.{Level, Logger}
import org.apache.spark.ml.classification.RandomForestClassifier
import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
import org.apache.spark.ml.feature.{LabeledPoint, StringIndexer, VectorAssembler}
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.sql.types._

// $example off$
import org.apache.spark.sql.SparkSession



    val spark = SparkSession
      .builder
      .appName("ChurnExample")
      .master("local")
      .getOrCreate()

    // define the schema of input data
    val customSchema = StructType(Array(
      StructField("state", StringType, true),
      StructField("account_length", DoubleType, true),
      StructField("area_code", StringType, true),

      StructField("phone_number", StringType, true),
      StructField("intl_plan", StringType, true),

      StructField("voice_mail_plan", StringType, true),
      StructField("number_vmail_messages", DoubleType, true),

      StructField("total_day_minutes", DoubleType, true),
      StructField("total_day_calls", DoubleType, true),

      StructField("total_day_charge", DoubleType, true),
      StructField("total_eve_minutes", DoubleType, true),
      StructField("total_eve_calls", DoubleType, true),
      StructField("total_eve_charge", DoubleType, true),
      StructField("total_night_minutes", DoubleType, true),

      StructField("total_night_calls", DoubleType, true),
      StructField("total_night_charge", DoubleType, true),
      StructField("total_intl_minutes", DoubleType, true),
      StructField("total_intl_calls", DoubleType, true),
      StructField("total_intl_charge", DoubleType, true),
      StructField("number_customer_service_calls", DoubleType, true),

      StructField("churned", StringType, true)

    ))

    // read in the data into a DataFrame
    val ds = spark.read.option("inferSchema", "false").schema(customSchema).csv("data/churn.all")
    ds.printSchema()

    // index the intl_plan column
    val indexer = new StringIndexer()
      .setInputCol("intl_plan")
      .setOutputCol("intl_plan_idx")
    val indexed = indexer.fit(ds).transform(ds)

    indexed.printSchema()

    // index the churned column
    val churn = new StringIndexer()
      .setInputCol("churned")
      .setOutputCol("churned_idx")
    val churned = churn.fit(indexed).transform(indexed)

    // vector assembler
    val assembler = new VectorAssembler()
      .setInputCols(Array("account_length", "intl_plan_idx", "number_vmail_messages", "total_day_minutes",
                          "total_day_calls", "total_day_charge", "total_eve_minutes", "total_eve_calls",
                          "total_night_minutes", "total_night_calls", "total_night_charge", "total_intl_minutes",
                          "total_intl_calls", "total_intl_charge", "number_customer_service_calls"))
      .setOutputCol("features")

    val assemdata = assembler.transform(churned)
    assemdata.printSchema()

    // split the data for training and test
    val Array(trainingData, testData) = assemdata.randomSplit(Array(0.7, 0.3), 1000)

    // Train a RandomForest model.
    val rf = new RandomForestClassifier()
      .setLabelCol("churned_idx")
      .setFeaturesCol("features")
      .setNumTrees(30)

    // Fit the model
    val rfModel = rf.fit(trainingData)
    val str = rfModel.toDebugString
    println(str)

    // predict
    val predict = rfModel.transform(testData)
    predict.select("churned", "prediction").show(1000)

    // evaluate the results
    val evaluator = new BinaryClassificationEvaluator()
      .setLabelCol("churned_idx")
      .setRawPredictionCol("prediction")

    val accuracy = evaluator.evaluate(predict)
    println("Test Error = " + (1.0 - accuracy))

    import spark.implicits._

    // evaluate the model
    val predictionsAndLabels = predict.select("prediction", "churned_idx")
      .map(row => (row.getDouble(0), row.getDouble(1)))

    // compute confusion matrix
    val metrics = new MulticlassMetrics(predictionsAndLabels.rdd)
    println("\nConfusion matrix:")
    println(metrics.confusionMatrix)




    
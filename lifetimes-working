from lifetimes.datasets import load_cdnow
data = load_cdnow(index_col=[0])
data.head()



from lifetimes import BetaGeoFitter

# similar API to scikit-learn and lifelines.
bgf = BetaGeoFitter(penalizer_coef=0.0)
bgf.fit(data['frequency'], data['recency'], data['T'])
print (bgf)



from lifetimes.plotting import plot_frequency_recency_matrix

plot_frequency_recency_matrix(bgf)




from lifetimes.plotting import plot_probability_alive_matrix

plot_probability_alive_matrix(bgf)





t = 1
data['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(t, data['frequency'], data['recency'], data['T'])
data.sort('predicted_purchases').tail(5)





from lifetimes.plotting import plot_period_transactions
plot_period_transactions(bgf)





from lifetimes.datasets import load_transaction_data
from lifetimes.utils import summary_data_from_transaction_data

transaction_data = load_transaction_data()
transaction_data.head()




summary = summary_data_from_transaction_data(transaction_data, 'id', 'date', observation_period_end='2014-12-31')

print (summary.head())




bgf.fit(summary['frequency'], summary['recency'], summary['T'])






from lifetimes.utils import calibration_and_holdout_data

summary_cal_holdout = calibration_and_holdout_data(transaction_data, 'id', 'date', 
                                        calibration_period_end='2014-09-01',
                                        observation_period_end='2014-12-31' )   
print summary_cal_holdout.head()




from lifetimes.plotting import plot_calibration_purchases_vs_holdout_purchases

bgf.fit(summary_cal_holdout['frequency_cal'], summary_cal_holdout['recency_cal'], summary_cal_holdout['T_cal'])
plot_calibration_purchases_vs_holdout_purchases(bgf, summary_cal_holdout)




t = 10 #predict purchases in 10 periods
individual = summary.iloc[20]

# The below function is an alias to `bfg.conditional_expected_number_of_purchases_up_to_time`
bgf.predict(t, individual['frequency'], individual['recency'], individual['T'])
# 0.0576511



from lifetimes.plotting import plot_history_alive

id = 35
days_since_birth = 10
sp_trans = transaction_data.ix[transaction_data['id'] == id]
plot_history_alive(bgf, days_since_birth, sp_trans, 'date')




from lifetimes.datasets import load_summary_data_with_monetary_value

summary_with_money_value = load_summary_data_with_monetary_value()
summary_with_money_value.head()
returning_customers_summary = summary_with_money_value[summary_with_money_value['frequency']>0]

returning_customers_summary.head()



returning_customers_summary[['monetary_value', 'frequency']].corr()



ggf = GammaGammaFitter(penalizer_coef = 0)
ggf.fit(returning_customers_summary['frequency'], 
        returning_customers_summary['monetary_value'])
print ggf  




print "Expected conditional average profit: %s, Average profit: %s" % (
    ggf.conditional_expected_average_profit(
        returning_customers_summary['frequency'], 
        returning_customers_summary['monetary_value']
    ), 
    summary_with_money_value[summary_with_money_value['frequency']>0]['monetary_value'].mean()
)




print ggf.customer_lifetime_value(
    bgf, #the model to use to predict the number of future transactions
    returning_customers_summary['frequency'],
    returning_customers_summary['recency'],
    returning_customers_summary['T'], 
    returning_customers_summary['monetary_value'], 
    time=12, 
    discount_rate=0.7
) #10689.30
